"use strict";(self.webpackChunkude_a_io_t_page=self.webpackChunkude_a_io_t_page||[]).push([[4072],{2384:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=r(7624),t=r(4552);r(6212),r(2440),r(6968);const s={sidebar_label:"Ejemplo 3"},a="Ejemplo 3 - ESP32 Web Server",l={id:"sesiones/percepcion/sesion7d",title:"Ejemplo 3 - ESP32 Web Server",description:"Descripci\xf3n",source:"@site/docs/sesiones/percepcion/sesion7d.md",sourceDirName:"sesiones/percepcion",slug:"/sesiones/percepcion/sesion7d",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7d",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sesiones/percepcion/sesion7d.md",tags:[],version:"current",frontMatter:{sidebar_label:"Ejemplo 3"},sidebar:"sesionesSidebar",previous:{title:"Ejemplo 2",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7c"},next:{title:"Ejemplo 4",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7e"}},o={},c=[{value:"Descripci\xf3n",id:"descripci\xf3n",level:2},{value:"Hardware",id:"hardware",level:2},{value:"Componentes",id:"componentes",level:3},{value:"Esquematico",id:"esquematico",level:3},{value:"Conexiones",id:"conexiones",level:3},{value:"Software",id:"software",level:2},{value:"Puesta en marcha",id:"puesta-en-marcha",level:2},{value:"Enlaces:",id:"enlaces",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"ejemplo-3---esp32-web-server",children:"Ejemplo 3 - ESP32 Web Server"}),"\n",(0,i.jsx)(n.h2,{id:"descripci\xf3n",children:"Descripci\xf3n"}),"\n",(0,i.jsxs)(n.p,{children:["Este ejemplo, tomado de ",(0,i.jsx)(n.strong,{children:"ESP32 Web Server \u2013 Arduino IDE"})," (",(0,i.jsx)(n.a,{href:"https://randomnerdtutorials.com/esp32-web-server-arduino-ide/",children:"link"}),"), es una versi\xf3n mejorada del ejemplo 2 (",(0,i.jsx)(n.a,{href:"sesion7c#",children:"link"}),") analizado previamente."]}),"\n",(0,i.jsx)(n.p,{children:"En este caso, a diferencia del ejemplo 2, se muestra una interfaz web mas amigable para el control de luces y se manejan dos leds."}),"\n",(0,i.jsx)(n.h2,{id:"hardware",children:"Hardware"}),"\n",(0,i.jsx)(n.h3,{id:"componentes",children:"Componentes"}),"\n",(0,i.jsx)(n.p,{children:"Los componentes necesarios para implementar este ejemplo son:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"#"}),(0,i.jsx)(n.th,{children:"Elemento"}),(0,i.jsx)(n.th,{children:"Cantidad"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"ESP32"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"Led"}),(0,i.jsx)(n.td,{children:"2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"Resistencia de 330 Ohm"}),(0,i.jsx)(n.td,{children:"2"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"esquematico",children:"Esquematico"}),"\n",(0,i.jsx)(n.p,{children:"El esquematico de este sistema se muestra a continuaci\xf3n:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ejemplo3_sch",src:r(812).c+"",width:"819",height:"843"})}),"\n",(0,i.jsx)(n.h3,{id:"conexiones",children:"Conexiones"}),"\n",(0,i.jsx)(n.p,{children:"El diagrama de conexi\xf3n se muestra a continuaci\xf3n:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ejemplo3_bb",src:r(5757).c+"",width:"876",height:"945"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Archivo Fritzing"})}),"\n",(0,i.jsxs)(n.p,{children:["El archivo Fritzing ",(0,i.jsx)(n.strong,{children:"ejemplo3_led_server.fzz"})," del ejemplo se puede descargar del siguiente ",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(3624).c+"",children:"[link]"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"software",children:"Software"}),"\n",(0,i.jsx)(n.p,{children:"El c\xf3digo del ESP32 se muestra a continuaci\xf3n:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <WiFi.h>\r\n#include <WiFiClient.h>\r\n\r\n/****************************************/\r\n/*         WiFi Definitions             */\r\n/****************************************/\r\n\r\n// Set these to your desired credentials.\r\nconst char* ssid     = "yourssid";\r\nconst char* password = "yourpasswd";\r\n\r\n/****************************************/\r\n/*           Pin Definitions            */\r\n/****************************************/\r\nconst int LED1 = 26; // P26 (GPIO26)\r\nconst int LED2 = 27; // P27 (GPIO27)\r\n\r\n// Auxiliar variables to store the current output state\r\nString led1State = "off";\r\nString led2State = "off";\r\n\r\n// Current time\r\nunsigned long currentTime = millis();\r\n// Previous time\r\nunsigned long previousTime = 0; \r\n// Define timeout time in milliseconds (example: 2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\n\r\n// Set web server port number to 80\r\nWiFiServer server(80);\r\n\r\n// Variable to store the HTTP request\r\nString header;\r\n\r\n\r\nvoid setup() \r\n{\r\n  initHardware();\r\n  connectToWiFi(ssid, password);\r\n  server.begin();\r\n  Serial.println("Server started");  \r\n}\r\n\r\nvoid loop() \r\n{\r\n  // Check if a client has connected\r\n  WiFiClient client = server.available(); // Listen for incoming clients\r\n  if (client) {                             // If a new client connects,\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println("New Client.");          // print a message out in the serial port\r\n    String currentLine = "";                // make a String to hold incoming data from the client\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client\'s connected\r\n      currentTime = millis();\r\n      if (client.available()) {             // if there\'s bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        header += c;\r\n        if (c == \'\\n\') {                    // if the byte is a newline character\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that\'s the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what\'s coming, then a blank line:\r\n            client.println("HTTP/1.1 200 OK");\r\n            client.println("Content-type:text/html");\r\n            client.println("Connection: close");\r\n            client.println();\r\n            \r\n            // turns the GPIOs on and off\r\n            if (header.indexOf("GET /1/on") >= 0) {\r\n              Serial.println("LED1 on");\r\n              led1State = "on";\r\n              digitalWrite(LED1, HIGH);\r\n            } else if (header.indexOf("GET /1/off") >= 0) {\r\n              Serial.println("LED1 off");\r\n              led1State = "off";\r\n              digitalWrite(LED1, LOW);\r\n            } else if (header.indexOf("GET /2/on") >= 0) {\r\n              Serial.println("LED2 on");\r\n              led2State = "on";\r\n              digitalWrite(LED2, HIGH);\r\n            } else if (header.indexOf("GET /2/off") >= 0) {\r\n              Serial.println("LED2 off");\r\n              led2State = "off";\r\n              digitalWrite(LED2, LOW);\r\n            }\r\n            \r\n            // Display the HTML web page\r\n            client.println("<!DOCTYPE html><html>");\r\n            client.println("<head><meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">");\r\n            client.println("<link rel=\\"icon\\" href=\\"data:,\\">");\r\n            // CSS to style the on/off buttons \r\n            // Feel free to change the background-color and font-size attributes to fit your preferences\r\n            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");\r\n            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");\r\n            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");\r\n            client.println(".button2 {background-color: #555555;}</style></head>");\r\n            \r\n            // Web Page Heading\r\n            client.println("<body><h1>ESP32 Web Server</h1>");\r\n            \r\n            // Display current state, and ON/OFF buttons for GPIO 34\r\n            client.println("<p>LED1 - State " + led1State + "</p>");\r\n            // If the led1State is off, it displays the ON button       \r\n            if (led1State=="off") {\r\n              client.println("<p><a href=\\"/1/on\\"><button class=\\"button\\">ON</button></a></p>");\r\n            } else {\r\n              client.println("<p><a href=\\"/1/off\\"><button class=\\"button button2\\">OFF</button></a></p>");\r\n            } \r\n               \r\n            // Display current state, and ON/OFF buttons for GPIO 35  \r\n            client.println("<p>LED2 - State " + led2State + "</p>");\r\n            // If the led2State is off, it displays the ON button       \r\n            if (led2State=="off") {\r\n              client.println("<p><a href=\\"/2/on\\"><button class=\\"button\\">ON</button></a></p>");\r\n            } else {\r\n              client.println("<p><a href=\\"/2/off\\"><button class=\\"button button2\\">OFF</button></a></p>");\r\n            }\r\n            client.println("</body></html>");\r\n            \r\n            // The HTTP response ends with another blank line\r\n            client.println();\r\n            // Break out of the while loop\r\n            break;\r\n          } else { // if you got a newline, then clear currentLine\r\n            currentLine = "";\r\n          }\r\n        } else if (c != \'\\r\') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n      }\r\n    }\r\n    // Clear the header variable\r\n    header = "";\r\n    // Close the connection\r\n    client.stop();\r\n    Serial.println("Client disconnected.");\r\n    Serial.println("");\r\n  }\r\n}\r\n\r\nvoid connectToWiFi(const char * ssid, const char * pwd)\r\n{\r\n  int ledState = 0;\r\n\r\n  printLine();\r\n  Serial.println("Connecting to WiFi network: " + String(ssid));\r\n\r\n  WiFi.begin(ssid, pwd);\r\n\r\n  while (WiFi.status() != WL_CONNECTED) \r\n  {\r\n    // Blink LED while we\'re connecting:\r\n    digitalWrite(LED_BUILTIN, ledState);\r\n    ledState = (ledState + 1) % 2; // Flip ledState\r\n    delay(500);\r\n    Serial.print(".");\r\n  }\r\n\r\n  Serial.println();\r\n  Serial.println("WiFi connected!");\r\n  Serial.print("IP address: ");\r\n  Serial.println(WiFi.localIP());\r\n}\r\n\r\n\r\nvoid initHardware()\r\n{\r\n  Serial.begin(115200);\r\n  // Initialize the output variables as outputs\r\n  pinMode(LED1, OUTPUT);\r\n  pinMode(LED2, OUTPUT);\r\n  // Set outputs to LOW\r\n  digitalWrite(LED1, LOW);\r\n  digitalWrite(LED2, LOW);\r\n  // Don\'t need to set ANALOG_PIN as input, \r\n  // that\'s all it can be.\r\n}\r\n\r\nvoid printLine()\r\n{\r\n  Serial.println();\r\n  for (int i=0; i<30; i++)\r\n    Serial.print("-");\r\n  Serial.println();\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"puesta-en-marcha",children:"Puesta en marcha"}),"\n",(0,i.jsx)(n.p,{children:"Antes de descargar el programa al ESP32, no olvidar modificar las lineas de configuraci\xf3n de acceso al AP:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'// Set these to your desired credentials.\r\nconst char* ssid     = "yourssid";\r\nconst char* password = "yourpasswd";\n'})}),"\n",(0,i.jsx)(n.p,{children:"Una vez hecho esto, abrir el monitor serial de acuerdo a la configuraci\xf3n realizada en el programa (115200 para el caso). Si todo esta bien, la salida ser\xe1 como la que se muestra a continuaci\xf3n:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"conexion_serial",src:r(2376).c+"",width:"798",height:"593"})}),"\n",(0,i.jsxs)(n.p,{children:["Una vez leida la IP arrojada en el monitor serial, se recomienda verificar conectividad antes de hacer el test de la aplicaci\xf3n. Para ello desde un PC conectado a la misma red local se puede usar el comando ",(0,i.jsx)(n.strong,{children:"ping"})," tal y como se muestra a continuaci\xf3n:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ping",src:r(4360).c+"",width:"607",height:"342"})}),"\n",(0,i.jsx)(n.p,{children:"Si hay conectividad; ahora si, desde un navegador (en un PC o dispositivo movil) colocar la direcci\xf3n IP del ESP32 e interactuar con la interfaz verificando que los leds conectados a la ESP32 se enciendan y apaguen. A continuaci\xf3n se muestra la interfaz grafica desplegada:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"interfaz_web",src:r(2068).c+"",width:"786",height:"464"})}),"\n",(0,i.jsx)(n.p,{children:"Tambien es posible hacer el test de la interfaz usando aplicaciones como Postman, para ello coloque las siguientes URLs:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"URL"}),(0,i.jsx)(n.th,{children:"Efecto"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"http://yourAddress/1/on"})}),(0,i.jsx)(n.td,{children:"Enciende el LED1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"http://yourAddress/1/off"})}),(0,i.jsx)(n.td,{children:"Apaga el LED1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"http://yourAddress/2/on"})}),(0,i.jsx)(n.td,{children:"Enciende el LED2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"http://yourAddress/2/off"})}),(0,i.jsx)(n.td,{children:"Apaga el LED2"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["La siguiente figura muestra el caso en el cual ",(0,i.jsx)(n.strong,{children:"yourAddress"})," es la del ejemplo (",(0,i.jsx)(n.strong,{children:"192.168.1.12"}),")"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"postman_test",src:r(8808).c+"",width:"940",height:"615"})}),"\n",(0,i.jsx)(n.h2,{id:"enlaces",children:"Enlaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/paulocsanz?tab=repositories",children:"https://github.com/paulocsanz?tab=repositories"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/me-no-dev?tab=repositories",children:"https://github.com/me-no-dev?tab=repositories"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiAccessPoint/WiFiAccessPoint.ino",children:"https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiAccessPoint/WiFiAccessPoint.ino"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/hideakitai?tab=repositories",children:"https://github.com/hideakitai?tab=repositories"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://help.ubidots.com/en/articles/748067-connect-an-esp32-devkitc-to-ubidots-over-mqtt",children:"https://help.ubidots.com/en/articles/748067-connect-an-esp32-devkitc-to-ubidots-over-mqtt"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://help.ubidots.com/en/articles/4855281-connect-your-esp32-to-ubidots-over-http-tcp-or-udp",children:"https://help.ubidots.com/en/articles/4855281-connect-your-esp32-to-ubidots-over-http-tcp-or-udp"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3624:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/files/ejemplo3_led_server-5906fcfc9ca7f5dc72bb858391c4f92c.fzz"},2376:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/conexion_serial-2bf56207932dcc938923a9b51efdc1aa.png"},5757:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/ejemplo3_led_server_bb-850935bbd52fa9d6d8ee37bfb58bc07c.png"},812:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/ejemplo3_led_server_sch-ad2e04cee75759ca50a9a493561eda44.png"},2068:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/interfaz_web-2a60dea27cfa562456b03640b16b2153.png"},4360:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/ping-f21aebe2902b6d1a6a4f20d3585e24c0.png"},8808:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/postman_test-fc3c40ea5d32a1831fb1c5ab0aaceff6.png"}}]);