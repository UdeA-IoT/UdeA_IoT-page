"use strict";(self.webpackChunkude_a_io_t_page=self.webpackChunkude_a_io_t_page||[]).push([[7760],{5600:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=r(7624),s=r(4552);r(6212),r(2440),r(6968);const t={sidebar_label:"Ejemplo 4"},a="Ejemplo 4 - ESP32 Thing Hookup Guide",o={id:"sesiones/percepcion/sesion7e",title:"Ejemplo 4 - ESP32 Thing Hookup Guide",description:"Descripci\xf3n",source:"@site/docs/sesiones/percepcion/sesion7e.md",sourceDirName:"sesiones/percepcion",slug:"/sesiones/percepcion/sesion7e",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7e",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sesiones/percepcion/sesion7e.md",tags:[],version:"current",frontMatter:{sidebar_label:"Ejemplo 4"},sidebar:"sesionesSidebar",previous:{title:"Ejemplo 3",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7d"},next:{title:"Ejemplo 5",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7f"}},l={},c=[{value:"Descripci\xf3n",id:"descripci\xf3n",level:2},{value:"Hardware",id:"hardware",level:2},{value:"Componentes",id:"componentes",level:3},{value:"Esquematico",id:"esquematico",level:3},{value:"Conexiones",id:"conexiones",level:3},{value:"Software",id:"software",level:2},{value:"Puesta en marcha",id:"puesta-en-marcha",level:2},{value:"Referencias",id:"referencias",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"ejemplo-4---esp32-thing-hookup-guide",children:"Ejemplo 4 - ESP32 Thing Hookup Guide"}),"\n",(0,i.jsx)(n.h2,{id:"descripci\xf3n",children:"Descripci\xf3n"}),"\n",(0,i.jsxs)(n.p,{children:["Este ejemplo es tomado de la secci\xf3n ",(0,i.jsx)(n.strong,{children:"Arduino Example: WiFi"})," (",(0,i.jsx)(n.a,{href:"https://learn.sparkfun.com/tutorials/esp32-thing-hookup-guide/all#arduino-example-wifi",children:"link"}),") del tutorial ",(0,i.jsx)(n.strong,{children:"ESP32 Thing Hookup Guide"})," (",(0,i.jsx)(n.a,{href:"https://learn.sparkfun.com/tutorials/esp32-thing-hookup-guide/",children:"link"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["En este ejemplo, se usa la libreria WiFi para demostrar como conectar el ESP32 a una red wifi cercana y acceder como cliente, al dominio remoto ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"http://example.com/",children:"http://example.com/"})})]}),"\n",(0,i.jsx)(n.h2,{id:"hardware",children:"Hardware"}),"\n",(0,i.jsx)(n.h3,{id:"componentes",children:"Componentes"}),"\n",(0,i.jsx)(n.p,{children:"La siguiente tabla muestra los componentes de hardware necesarios para el caso:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"#"}),(0,i.jsx)(n.th,{children:"Elemento"}),(0,i.jsx)(n.th,{children:"Cantidad"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"ESP32"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"Pulsador"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"Led"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"Resistencia de 330 Ohm"}),(0,i.jsx)(n.td,{children:"1"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"esquematico",children:"Esquematico"}),"\n",(0,i.jsx)(n.p,{children:"El esquematico de este sistema se muestra a continuaci\xf3n:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ejemplo4_sch",src:r(2356).c+"",width:"756",height:"843"})}),"\n",(0,i.jsx)(n.h3,{id:"conexiones",children:"Conexiones"}),"\n",(0,i.jsx)(n.p,{children:"El diagrama de conexi\xf3n se muestra a continuaci\xf3n:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ejemplo4_bb",src:r(8652).c+"",width:"693",height:"717"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Archivo Fritzing"})}),"\n",(0,i.jsxs)(n.p,{children:["El archivo Fritzing ",(0,i.jsx)(n.strong,{children:"ejemplo4.fzz"})," del ejemplo se puede descargar del siguiente ",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(3724).c+"",children:"[link]"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"software",children:"Software"}),"\n",(0,i.jsx)(n.p,{children:"El c\xf3digo del ESP32 se muestra a continuaci\xf3n:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <WiFi.h>\r\n\r\n// WiFi network name and password:\r\nconst char * networkName = "YOUR_NETWORK_HERE";\r\nconst char * networkPswd = "YOUR_PASSWORD_HERE";\r\n\r\n// Internet domain to request from:\r\nconst char * hostDomain = "example.com";\r\nconst int hostPort = 80;\r\n\r\nconst int BUTTON_PIN = 0;\r\nconst int LED_PIN = 5;\r\n\r\nvoid setup()\r\n{\r\n  // Initilize hardware:\r\n  Serial.begin(115200);\r\n  pinMode(BUTTON_PIN, INPUT_PULLUP);\r\n  pinMode(LED_PIN, OUTPUT);\r\n\r\n  // Connect to the WiFi network (see function below loop)\r\n  connectToWiFi(networkName, networkPswd);\r\n\r\n  digitalWrite(LED_PIN, LOW); // LED off\r\n  Serial.print("Press button 0 to connect to ");\r\n  Serial.println(hostDomain);\r\n}\r\n\r\nvoid loop()\r\n{\r\n  if (digitalRead(BUTTON_PIN) == LOW)\r\n  { // Check if button has been pressed\r\n    while (digitalRead(BUTTON_PIN) == LOW)\r\n      ; // Wait for button to be released\r\n\r\n    digitalWrite(LED_PIN, HIGH); // Turn on LED\r\n    requestURL(hostDomain, hostPort); // Connect to server\r\n    digitalWrite(LED_PIN, LOW); // Turn off LED\r\n  }\r\n}\r\n\r\nvoid connectToWiFi(const char * ssid, const char * pwd)\r\n{\r\n  int ledState = 0;\r\n\r\n  printLine();\r\n  Serial.println("Connecting to WiFi network: " + String(ssid));\r\n\r\n  WiFi.begin(ssid, pwd);\r\n\r\n  while (WiFi.status() != WL_CONNECTED) \r\n  {\r\n    // Blink LED while we\'re connecting:\r\n    digitalWrite(LED_PIN, ledState);\r\n    ledState = (ledState + 1) % 2; // Flip ledState\r\n    delay(500);\r\n    Serial.print(".");\r\n  }\r\n\r\n  Serial.println();\r\n  Serial.println("WiFi connected!");\r\n  Serial.print("IP address: ");\r\n  Serial.println(WiFi.localIP());\r\n}\r\n\r\nvoid requestURL(const char * host, uint8_t port)\r\n{\r\n  printLine();\r\n  Serial.println("Connecting to domain: " + String(host));\r\n\r\n  // Use WiFiClient class to create TCP connections\r\n  WiFiClient client;\r\n  if (!client.connect(host, port))\r\n  {\r\n    Serial.println("connection failed");\r\n    return;\r\n  }\r\n  Serial.println("Connected!");\r\n  printLine();\r\n\r\n  // This will send the request to the server\r\n  client.print((String)"GET / HTTP/1.1\\r\\n" +\r\n               "Host: " + String(host) + "\\r\\n" +\r\n               "Connection: close\\r\\n\\r\\n");\r\n  unsigned long timeout = millis();\r\n  while (client.available() == 0) \r\n  {\r\n    if (millis() - timeout > 5000) \r\n    {\r\n      Serial.println(">>> Client Timeout !");\r\n      client.stop();\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Read all the lines of the reply from server and print them to Serial\r\n  while (client.available()) \r\n  {\r\n    String line = client.readStringUntil(\'\\r\');\r\n    Serial.print(line);\r\n  }\r\n\r\n  Serial.println();\r\n  Serial.println("closing connection");\r\n  client.stop();\r\n}\r\n\r\nvoid printLine()\r\n{\r\n  Serial.println();\r\n  for (int i=0; i<30; i++)\r\n    Serial.print("-");\r\n  Serial.println();\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"puesta-en-marcha",children:"Puesta en marcha"}),"\n",(0,i.jsx)(n.p,{children:"Antes de descargar el programa al ESP32, no olvidar modificar las lineas de configuraci\xf3n de acceso al AP:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'// WiFi network name and password:\r\nconst char * networkName = "YOUR_NETWORK_HERE";\r\nconst char * networkPswd = "YOUR_PASSWORD_HERE";\n'})}),"\n",(0,i.jsx)(n.p,{children:"Una vez hecho esto, abrir el monitor serial de acuerdo a la configuraci\xf3n realizada en el programa (115200 para el caso). Si todo esta bien, la salida ser\xe1 como la que se muestra a continuaci\xf3n:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"serial_out1",src:r(8736).c+"",width:"798",height:"593"})}),"\n",(0,i.jsx)(n.p,{children:"Luego, al presionar el pulsador, entonces la salida en el monitor serial ser\xe1:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"serial_out2",src:r(5544).c+"",width:"798",height:"593"})}),"\n",(0,i.jsxs)(n.p,{children:["Si se observa la salida serial y se compara al inspecci\xf3nar en el navegador la pagina accedida (",(0,i.jsx)(n.strong,{children:"example.com"}),"), se puede observar, que lo que se imprime en el monitor serial es el codigo HTML de la pagina accedida."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"browser_output",src:r(3312).c+"",width:"1366",height:"728"})}),"\n",(0,i.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://arduinotogo.com/",children:"https://arduinotogo.com/"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3724:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/files/ejemplo4-2908879915753fb06554b1d30b881eb9.fzz"},3312:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/browser_output-3d8b8bcfe13982d36825fa0b678c2302.png"},8652:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/ejemplo4_bb-411b814614141339bfec5b83bf54f0eb.png"},2356:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/ejemplo4_sch-62a6a0433a7c89d7e8035a8f7267b262.png"},8736:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/serial_out1-ee3c52a3b7be1595725eb3b11ce551b3.png"},5544:(e,n,r)=>{r.d(n,{c:()=>i});const i=r.p+"assets/images/serial_out2-c85271b7e51dcdfc3423981f94182284.png"}}]);