"use strict";(self.webpackChunkude_a_io_t_page=self.webpackChunkude_a_io_t_page||[]).push([[4946],{940:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=s(7624),i=s(4552);s(6212),s(2440),s(6968);const a={sidebar_label:"Ejemplo 5"},o="Ejemplo 5 - ESP32 como cliente",l={id:"sesiones/percepcion/sesion7f",title:"Ejemplo 5 - ESP32 como cliente",description:"En todos los ejemplos anteriores, hemos visto el ESP32 funcionando como servidor. A continuaci\xf3n veremos un ejemplo en el cual el ESP32 toma un rol como cliente.",source:"@site/docs/sesiones/percepcion/sesion7f.md",sourceDirName:"sesiones/percepcion",slug:"/sesiones/percepcion/sesion7f",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7f",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sesiones/percepcion/sesion7f.md",tags:[],version:"current",frontMatter:{sidebar_label:"Ejemplo 5"},sidebar:"sesionesSidebar",previous:{title:"Ejemplo 4",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7e"},next:{title:"Ejemplo 6",permalink:"/UdeA_IoT-page/docs/sesiones/percepcion/sesion7g"}},t={},c=[{value:"Descripci\xf3n",id:"descripci\xf3n",level:2},{value:"Caso 1 - Usando el Curl",id:"caso-1---usando-el-curl",level:2},{value:"Caso 2 - Usando el Postman",id:"caso-2---usando-el-postman",level:2},{value:"Caso 3 - Usando el ESP32",id:"caso-3---usando-el-esp32",level:2},{value:"Hardware",id:"hardware",level:3},{value:"Software",id:"software",level:3},{value:"Puesta en marcha",id:"puesta-en-marcha",level:2},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"ejemplo-5---esp32-como-cliente",children:"Ejemplo 5 - ESP32 como cliente"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["En todos los ejemplos anteriores, hemos visto el ESP32 funcionando como ",(0,r.jsx)(n.strong,{children:"servidor"}),". A continuaci\xf3n veremos un ejemplo en el cual el ESP32 toma un rol como ",(0,r.jsx)(n.strong,{children:"cliente"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"descripci\xf3n",children:"Descripci\xf3n"}),"\n",(0,r.jsx)(n.p,{children:"En el siguiente ejemplo se muestra como realizar una petici\xf3n web empleando:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"El comando curl."}),"\n",(0,r.jsx)(n.li,{children:"Usando el Postman."}),"\n",(0,r.jsx)(n.li,{children:"Usando el ESP32."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"caso-1---usando-el-curl",children:"Caso 1 - Usando el Curl"}),"\n",(0,r.jsxs)(n.p,{children:["Un punto de partida para trabajar esta herramienta se resume en la siguiente resumen hecho por ",(0,r.jsx)(n.a,{href:"https://twitter.com/b0rk",children:"Julia Evans"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://wizardzines.com/comics/curl/curl.png",alt:"Curl"})}),"\n",(0,r.jsx)(n.p,{children:"Si se desea profundizar mas, en la web hay abundante material, de manera que lo animamos. En nuestro caso a modo de Test vamos a ejecutar el siguiente comando:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -v tmb.gr/hello.json\n"})}),"\n",(0,r.jsx)(n.p,{children:"El resultado de ejecutar este comando desde una consola de linux se muestra en la siguiente imagen:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"curl",src:s(4636).c+"",width:"1115",height:"624"})}),"\n",(0,r.jsxs)(n.p,{children:["Online, tambien encuentra esta herramienta en ",(0,r.jsx)(n.a,{href:"https://reqbin.com/curl",children:"Run Curl Commands Online"}),". Lo animamos a que haga el ensayo y observe el resultado al ejecutar el mismo comando previamente ejecutado."]}),"\n",(0,r.jsx)(n.h2,{id:"caso-2---usando-el-postman",children:"Caso 2 - Usando el Postman"}),"\n",(0,r.jsxs)(n.p,{children:["El ",(0,r.jsx)(n.a,{href:"https://www.postman.com/",children:"Postman"})," es una aplicaci\xf3n que permite la realizaci\xf3n de pruebas API. Este cliente HTTP nos da la posibilidad de testear 'HTTP requests' a trav\xe9s de una interfaz gr\xe1fica de usuario de manera amigable. Es ampliamente usado y segun el siguiente ",(0,r.jsx)(n.a,{href:"https://rapidapi.com/blog/best-api-testing-tools/",children:"enlace"})," es de las mejores herramientas para realizar testing API. A continuaci\xf3n se muestra el resultado de hacer la prueba anterior usando postman:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"test-postman",src:s(1872).c+"",width:"1266",height:"721"})}),"\n",(0,r.jsx)(n.h2,{id:"caso-3---usando-el-esp32",children:"Caso 3 - Usando el ESP32"}),"\n",(0,r.jsx)(n.h3,{id:"hardware",children:"Hardware"}),"\n",(0,r.jsx)(n.p,{children:"La siguiente tabla muestra los componentes de hardware necesarios para el caso:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"#"}),(0,r.jsx)(n.th,{children:"Elemento"}),(0,r.jsx)(n.th,{children:"Cantidad"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"ESP32"}),(0,r.jsx)(n.td,{children:"1"})]})})]}),"\n",(0,r.jsx)(n.p,{children:"Como no se necesitan realizar conexiones externas no es necesario mostrar ningun esquematico y diagrama de conexi\xf3n asociado al sistema."}),"\n",(0,r.jsx)(n.h3,{id:"software",children:"Software"}),"\n",(0,r.jsxs)(n.p,{children:["El siguiente ejemplo fue tomado del siguiente ",(0,r.jsx)(n.a,{href:"https://github.com/tamberg/fhnw-iot/blob/master/03/Arduino/ESP8266_WiFiClient/ESP8266_WiFiClient.ino",children:"link"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Codigo"}),": ",(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(3056).c+"",children:"ejemplo5.ino"}),". (",(0,r.jsx)(n.strong,{children:"Nota"}),": No olvidar modificar el ejemplo de acuerdo a los parametros de su red local)."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <WiFi.h>\r\n/*\r\nCodigo adaptado de: https://github.com/tamberg/fhnw-iot/blob/master/03/Arduino/ESP8266_WiFiClient/ESP8266_WiFiClient.ino\r\n*/\r\n\r\n//////////////////////\r\n// WiFi Definitions //\r\n//////////////////////\r\n\r\n// WiFi network\r\nconst char* ssid     = "SSID";\r\nconst char* password = "SSID_PASS";\r\n\r\nvoid setup() {\r\n  setupWiFi();\r\n  serverRequest();\r\n}\r\n\r\nvoid loop() {\r\n  \r\n}\r\n\r\nvoid setupWiFi() {\r\n  // Connecting to a WiFi network\r\n  Serial.begin(115200);\r\n  Serial.println();\r\n  Serial.println();\r\n  Serial.println("Connecting to WiFi network: " + String(ssid));\r\n  WiFi.begin(ssid, pwd);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(".");\r\n  }\r\n  Serial.println("");\r\n  Serial.println("WiFi connected");  \r\n  Serial.println("IP address: ");\r\n  Serial.println(WiFi.localIP());\r\n}\r\n\r\nvoid serverRequest() {\r\n  const char *host = "tmb.gr";\r\n  const char *path = "/hello.json";\r\n  const int port = 80;\r\n\r\n  // connect to remote host\r\n  WiFiClient client;\r\n  if (client.connect(host, port)) {   \r\n    /*\r\n    Command in PC: curl -v tmb.gr/hello.json\r\n    */\r\n\r\n    // send HTTP request\r\n    client.print("GET ");\r\n    client.print(path);\r\n    client.print(" HTTP/1.1\\r\\n");\r\n    client.print("Host: ");\r\n    client.print(host);\r\n    client.print("\\r\\n");\r\n    client.print("Connection: close\\r\\n\\r\\n");\r\n\r\n    // read HTTP response\r\n    while (client.connected() || client.available()) {\r\n      int ch = client.read();\r\n      while (ch >= 0) {\r\n          Serial.print((char) ch);\r\n          ch = client.read();\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"puesta-en-marcha",children:"Puesta en marcha"}),"\n",(0,r.jsx)(n.p,{children:"El resultado de ejecutar el c\xf3digo anterior en el arduino se muestra en:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"salida-serial",src:s(4536).c+"",width:"947",height:"424"})}),"\n",(0,r.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,r.jsx)(n.p,{children:"Como se puede ver de los ejemplos anteriormente realizados, es posible usar el arduino como un cliente web lo cual permite que este pueda comunicarse con cualquier plataforma IoT empleando cualquier API definida. En el suguiente ejemplo vamos a explorar un caso de uso."})]})}function p(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3056:(e,n,s)=>{s.d(n,{c:()=>r});const r=s.p+"assets/files/ejemplo5-cbbbd04a144cba3ffd28e92b219aeaa0.ino"},4636:(e,n,s)=>{s.d(n,{c:()=>r});const r=s.p+"assets/images/curl-2329702d427d6b499c84bf514ac20b86.png"},4536:(e,n,s)=>{s.d(n,{c:()=>r});const r=s.p+"assets/images/salida-serial-d93261cfcb8b1186f8d78ad9861aeb34.png"},1872:(e,n,s)=>{s.d(n,{c:()=>r});const r=s.p+"assets/images/test-postman-ffade13f6f1645e76bb45fdc1266f26a.png"}}]);